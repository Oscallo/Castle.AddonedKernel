# В этом рабочем процессе используются действия, не сертифицированные GitHub.
# Они предоставляются третьей стороной и регулируются
# отдельные условия обслуживания, политика конфиденциальности и поддержка
# документация.

# Этот рабочий процесс позволяет создать, протестировать, подписать и упаковать настольное приложение WPF или Windows Forms.
# построен на .NET Core.
# Чтобы узнать, как перенести существующее приложение на .NET Core,
# обратитесь к https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# Чтобы настроить этот рабочий процесс:
#
# 1. Настройте переменные среды
# GitHub устанавливает переменные среды по умолчанию для каждого запуска рабочего процесса.
# Замените переменные, относящиеся к вашему проекту, в разделе «env» ниже.
# № 2. Подписание
# Создайте сертификат подписи в приложении Windows.
# Проект упаковки или добавьте в проект существующий сертификат подписи.
# Далее используйте PowerShell для кодирования файла .pfx с использованием кодировки Base64.
# запустив следующий скрипт Powershell для генерации выходной строки:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' - Байт кодирования
# [System.Convert]::ToBase64String($pfx_cert) | Исходящий файл SigningCertificate_Encoded.txt
#
# Откройте выходной файл SigningCertificate_Encoded.txt и скопируйте
# строка внутри. Затем добавьте строку в репозиторий как секрет GitHub.
# и назовите его «Base64_Encoded_Pfx».
# Для получения дополнительной информации о том, как настроить сертификат подписи для
# этот рабочий процесс см. на https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Наконец, добавьте пароль сертификата подписи в репозиторий в качестве секрета и назовите его «Pfx_Key».
# См. раздел «Создание проекта упаковки приложений Windows» ниже, чтобы узнать, как используется секрет.
#
# Для получения дополнительной информации о действиях GitHub см. https://github.com/features/actions.
# Чтобы получить полный пример CI/CD для начала работы с рабочими процессами GitHub Action для настольных приложений,
# обратитесь к https://github.com/microsoft/github-actions-for-desktop-apps 

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  
jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # Список доступных типов направляющих см.
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Castle.AddonedKernel.sln                                                                    # Замените на имя вашего решения, например MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                                                                  # Замените путь к вашему тестовому проекту, например MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: /src/Castle.AddonedKernel/                                                          # Замените каталогом проекта Wap относительно решения, т. е. MyWpfApp.Package.
      Wap_Project_Path: Castle.AddonedKernel/src/Castle.AddonedKernel/Castle.AddonedKernel.csproj                # Замените на путь к вашему Wap-проекту, т. е. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Установите рабочую нагрузку .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Добавьте MSBuild в PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Выполнить все модульные тесты в решении.
    # - name: Execute unit tests
    #  run: dotnet test

    #  Восстановите приложение, чтобы заполнить папку obj идентификаторами RuntimeIdentifiers
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #   env:
    #     Configuration: ${{ matrix.configuration }}

    # Декодируйте PFX в кодировке Base 64 и сохраните Signing_Certificate.
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    #  Создайте пакет приложения, создав и упаковав проект упаковки приложений Windows.
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}

    # Удалить PFX
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Загрузите пакет MSIX: https://github.com/marketplace/actions/upload-a-build-artifact.
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v3
    # with:
    #   name: MSIX Package
    #   path: ${{ env.Wap_Project_Directory }}\AppPackages


    - name: Publish NuGet Package
      run: dotnet nuget push ${{env.DOTNET_ROOT}}\Package\*.nupkg --api-key ${{ secrets.NUGET_SECRET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
