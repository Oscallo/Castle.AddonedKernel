# В этом рабочем процессе используются действия, не сертифицированные GitHub.
# Они предоставляются третьей стороной и регулируются
# отдельные условия обслуживания, политика конфиденциальности и поддержка
# документация.

# Этот рабочий процесс позволяет создать, протестировать, подписать и упаковать настольное приложение WPF или Windows Forms.
# построен на .NET Core.
# Чтобы узнать, как перенести существующее приложение на .NET Core,
# обратитесь к https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# Чтобы настроить этот рабочий процесс:
#
# 1. Настройте переменные среды
# GitHub устанавливает переменные среды по умолчанию для каждого запуска рабочего процесса.
# Замените переменные, относящиеся к вашему проекту, в разделе «env» ниже.
# № 2. Подписание
# Создайте сертификат подписи в приложении Windows.
# Проект упаковки или добавьте в проект существующий сертификат подписи.
# Далее используйте PowerShell для кодирования файла .pfx с использованием кодировки Base64.
# запустив следующий скрипт Powershell для генерации выходной строки:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' - Байт кодирования
# [System.Convert]::ToBase64String($pfx_cert) | Исходящий файл SigningCertificate_Encoded.txt
#
# Откройте выходной файл SigningCertificate_Encoded.txt и скопируйте
# строка внутри. Затем добавьте строку в репозиторий как секрет GitHub.
# и назовите его «Base64_Encoded_Pfx».
# Для получения дополнительной информации о том, как настроить сертификат подписи для
# этот рабочий процесс см. на https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Наконец, добавьте пароль сертификата подписи в репозиторий в качестве секрета и назовите его «Pfx_Key».
# См. раздел «Создание проекта упаковки приложений Windows» ниже, чтобы узнать, как используется секрет.
#
# Для получения дополнительной информации о действиях GitHub см. https://github.com/features/actions.
# Чтобы получить полный пример CI/CD для начала работы с рабочими процессами GitHub Action для настольных приложений,
# обратитесь к https://github.com/microsoft/github-actions-for-desktop-apps 

name: .NET Core Desktop

on:
  release:
    types: [published]

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug

permissions:
  contents: read
  
jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # Список доступных типов направляющих см.
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Castle.AddonedKernel.sln
      Main_Project_Path: src/Castle.AddonedKernel/Castle.AddonedKernel.csproj       
      Package_Path: C:\Packages

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Установите рабочую нагрузку .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Выполнить все модульные тесты в решении.
    # - name: Execute unit tests
    #   run: dotnet test

    - name: Install dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Build
      run: dotnet build ${{ env.Main_Project_Path }} --configuration Release --no-restore

    - name: Build the NuGet package
      run: dotnet pack ${{ env.Main_Project_Path }} --configuration Release --output C:\Packages

    - name: Publish NuGet Package
      run: dotnet nuget push C:\Packages\*.nupkg --api-key ${{ secrets.NUGET_SECRET_KEY }} --no-symbols --source https://api.nuget.org/v3/index.json --skip-duplicate
